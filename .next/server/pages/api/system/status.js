"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/system/status";
exports.ids = ["pages/api/system/status"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsystem%2Fstatus&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csystem%5Cstatus.ts&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsystem%2Fstatus&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csystem%5Cstatus.ts&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_system_status_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src\\pages\\api\\system\\status.ts */ \"(api)/./src/pages/api/system/status.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_system_status_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_system_status_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_system_status_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_system_status_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/system/status\",\n        pathname: \"/api/system/status\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_system_status_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnN5c3RlbSUyRnN0YXR1cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnNyYyU1Q3BhZ2VzJTVDYXBpJTVDc3lzdGVtJTVDc3RhdHVzLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ2lFO0FBQ2pFO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyw0REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsNERBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELHFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtcmVjaXBlLWdlbmVyYXRvci1sb2NhbC8/MjAxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vc3JjXFxcXHBhZ2VzXFxcXGFwaVxcXFxzeXN0ZW1cXFxcc3RhdHVzLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvc3lzdGVtL3N0YXR1c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3N5c3RlbS9zdGF0dXNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsystem%2Fstatus&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csystem%5Cstatus.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/lib/lmstudio.ts":
/*!*****************************!*\
  !*** ./src/lib/lmstudio.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkLMStudioHealth: () => (/* binding */ checkLMStudioHealth),\n/* harmony export */   generateChatResponse: () => (/* binding */ generateChatResponse),\n/* harmony export */   generateRecipe: () => (/* binding */ generateRecipe),\n/* harmony export */   generateRecipeTags: () => (/* binding */ generateRecipeTags),\n/* harmony export */   getAvailableModels: () => (/* binding */ getAvailableModels),\n/* harmony export */   getTTS: () => (/* binding */ getTTS),\n/* harmony export */   validateIngredient: () => (/* binding */ validateIngredient)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var _prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./prisma */ \"(api)/./src/lib/prisma.ts\");\n/* harmony import */ var _prompts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompts */ \"(api)/./src/lib/prompts.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__]);\nopenai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// LM Studio configuration\nconst LM_STUDIO_BASE_URL = \"https://hahahagame-gemini-play.deno.dev\";\nconst LM_STUDIO_API_KEY = process.env.LM_STUDIO_API_KEY;\n// Initialize OpenAI client configured for LM Studio\nconst lmStudio = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    baseURL: LM_STUDIO_BASE_URL,\n    apiKey: LM_STUDIO_API_KEY\n});\nconst saveLMStudioResponses = async ({ userId, prompt, response, model })=>{\n    try {\n        const aiGenerated = await _prisma__WEBPACK_IMPORTED_MODULE_1__[\"default\"].aIGenerated.create({\n            data: {\n                userId,\n                prompt,\n                response,\n                model: model || \"gemini-2.0-flash\",\n                tokens: response.usage?.total_tokens || 0,\n                cost: 0,\n                status: \"success\"\n            }\n        });\n        return aiGenerated.id;\n    } catch (error) {\n        console.error(\"Failed to save LM Studio response to db:\", error);\n        return null;\n    }\n};\n// Generate recipes using LM Studio\nconst generateRecipe = async (ingredients, dietaryPreferences, userId)=>{\n    try {\n        const prompt = (0,_prompts__WEBPACK_IMPORTED_MODULE_2__.getRecipeGenerationPrompt)(ingredients, dietaryPreferences);\n        const model = \"gemini-2.0-flash\";\n        console.info(\"Generating recipes from LM Studio...\");\n        const response = await lmStudio.chat.completions.create({\n            model,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            max_tokens: 2000,\n            temperature: 0.7,\n            top_p: 0.9\n        });\n        console.log(\"LM Studio response received successfully\");\n        const _id = await saveLMStudioResponses({\n            userId,\n            prompt,\n            response,\n            model\n        });\n        return {\n            recipes: response.choices[0].message?.content,\n            openaiPromptId: _id || \"null-prompt-id\"\n        };\n    } catch (error) {\n        console.error(\"Failed to generate recipe with LM Studio:\", error);\n        if (error instanceof Error) {\n            console.error(\"Error message:\", error.message);\n            console.error(\"Error stack:\", error.stack);\n        }\n        // Re-throw with more specific error information\n        throw new Error(`LM Studio Error: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n    }\n};\n// Validate an ingredient name using LM Studio\nconst validateIngredient = async (ingredientName, userId)=>{\n    try {\n        const prompt = (0,_prompts__WEBPACK_IMPORTED_MODULE_2__.getIngredientValidationPrompt)(ingredientName);\n        const model = \"gemini-2.0-flash\";\n        console.info(\"Validating ingredient with LM Studio...\");\n        const response = await lmStudio.chat.completions.create({\n            model,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            max_tokens: 500,\n            temperature: 0.3\n        });\n        await saveLMStudioResponses({\n            userId,\n            prompt,\n            response,\n            model\n        });\n        return response.choices[0].message?.content;\n    } catch (error) {\n        console.error(\"Failed to validate ingredient with LM Studio:\", error);\n        throw new Error(\"Failed to validate ingredient\");\n    }\n};\n// Get recipe narration text using LM Studio\nconst getRecipeNarration = async (recipe, userId)=>{\n    try {\n        const prompt = (0,_prompts__WEBPACK_IMPORTED_MODULE_2__.getRecipeNarrationPrompt)(recipe);\n        const model = \"gemini-2.0-flash\";\n        console.info(\"Getting recipe narration text from LM Studio...\");\n        const response = await lmStudio.chat.completions.create({\n            model,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            max_tokens: 1500,\n            temperature: 0.6\n        });\n        const _id = await saveLMStudioResponses({\n            userId,\n            prompt,\n            response,\n            model\n        });\n        return response.choices[0].message?.content;\n    } catch (error) {\n        console.error(\"Failed to generate recipe narration with LM Studio:\", error);\n        throw new Error(\"Failed to generate recipe narration\");\n    }\n};\n// Generate text-to-speech using Web Speech API (browser-based)\nconst getTTS = async (recipe, userId)=>{\n    try {\n        const text = await getRecipeNarration(recipe, userId);\n        if (!text) throw new Error(\"Unable to get text for recipe narration\");\n        // Return the text for client-side TTS using Web Speech API\n        // The actual TTS will be handled on the frontend\n        return text;\n    } catch (error) {\n        console.error(\"Failed to prepare TTS text:\", error);\n        throw new Error(\"Failed to prepare TTS text\");\n    }\n};\n// Generate tags for a recipe using LM Studio\nconst generateRecipeTags = async (recipe, userId)=>{\n    try {\n        const prompt = (0,_prompts__WEBPACK_IMPORTED_MODULE_2__.getRecipeTaggingPrompt)(recipe);\n        const model = \"gemini-2.0-flash\";\n        console.info(\"Generating recipe tags with LM Studio...\");\n        const response = await lmStudio.chat.completions.create({\n            model,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            max_tokens: 300,\n            temperature: 0.4\n        });\n        await saveLMStudioResponses({\n            userId,\n            prompt,\n            response,\n            model\n        });\n        const [tagsObject] = response.choices;\n        const rawTags = tagsObject.message?.content?.trim();\n        let tagsArray = [];\n        if (rawTags) {\n            try {\n                tagsArray = JSON.parse(rawTags);\n                if (!Array.isArray(tagsArray) || tagsArray.some((tag)=>typeof tag !== \"string\")) {\n                    throw new Error(\"Invalid JSON structure: Expected an array of strings.\");\n                }\n            } catch (jsonError) {\n                console.error(\"JSON parsing error:\", jsonError);\n                console.error(\"Received malformed JSON:\", rawTags);\n                throw new Error(`Failed to parse tags from LM Studio response. --> ${jsonError}`);\n            }\n        }\n        if (tagsArray.length) {\n            const tags = tagsArray.map((tag)=>({\n                    tag: tag.toLowerCase()\n                }));\n            console.info(`Adding tags -> ${tagsArray} for new recipe -> ${recipe.name} from LM Studio`);\n            await _prisma__WEBPACK_IMPORTED_MODULE_1__[\"default\"].recipe.update({\n                where: {\n                    id: recipe.id\n                },\n                data: {\n                    tags\n                }\n            });\n        }\n        return;\n    } catch (error) {\n        console.error(\"Failed to generate tags for the recipe with LM Studio:\", error);\n        throw new Error(`Failed to generate tags for the recipe --> ${error}`);\n    }\n};\n// Generate a chat response using LM Studio\nconst generateChatResponse = async (message, recipe, history, userId)=>{\n    try {\n        const model = \"gemini-2.0-flash\";\n        const messages = [\n            {\n                role: \"system\",\n                content: (0,_prompts__WEBPACK_IMPORTED_MODULE_2__.getChatAssistantSystemPrompt)(recipe)\n            },\n            ...history,\n            {\n                role: \"user\",\n                content: message\n            }\n        ];\n        console.info(\"Generating chat response with LM Studio...\");\n        const response = await lmStudio.chat.completions.create({\n            model,\n            messages,\n            max_tokens: 800,\n            temperature: 0.7\n        });\n        const reply = response.choices?.[0]?.message?.content ?? \"Sorry, I had trouble responding.\";\n        const totalTokens = response.usage?.total_tokens ?? 0;\n        // Save to DB only on first message\n        if (history.length === 1) {\n            await saveLMStudioResponses({\n                userId,\n                prompt: `Chat session started for recipe: ${recipe.name}, first message: ${message}`,\n                response,\n                model\n            });\n        }\n        return {\n            reply,\n            totalTokens\n        };\n    } catch (error) {\n        console.error(\"Failed to generate chat response with LM Studio:\", error);\n        return {\n            reply: \"Sorry, I had trouble responding.\",\n            totalTokens: 0\n        };\n    }\n};\n// Health check function to verify LM Studio connection\nconst checkLMStudioHealth = async ()=>{\n    try {\n        const response = await lmStudio.chat.completions.create({\n            model: \"gemini-2.0-flash\",\n            messages: [\n                {\n                    role: \"user\",\n                    content: \"Hello\"\n                }\n            ],\n            max_tokens: 10\n        });\n        return response.choices?.[0]?.message?.content !== undefined;\n    } catch (error) {\n        console.error(\"LM Studio health check failed:\", error);\n        return false;\n    }\n};\n// Get available models from LM Studio\nconst getAvailableModels = async ()=>{\n    try {\n        const response = await lmStudio.models.list();\n        return response.data.map((model)=>model.id);\n    } catch (error) {\n        console.error(\"Failed to get available models from LM Studio:\", error);\n        return [\n            \"gemini-2.0-flash\"\n        ]; // fallback\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/lmstudio.ts\n");

/***/ }),

/***/ "(api)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThDO0FBRTlDLE1BQU1DLGtCQUFrQkM7QUFJakIsTUFBTUMsU0FBU0YsZ0JBQWdCRSxNQUFNLElBQUksSUFBSUgsd0RBQVlBLEdBQUc7QUFFbkUsSUFBSUksSUFBeUIsRUFBY0gsZ0JBQWdCRSxNQUFNLEdBQUdBO0FBRXBFLGlFQUFlQSxNQUFNQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtcmVjaXBlLWdlbmVyYXRvci1sb2NhbC8uL3NyYy9saWIvcHJpc21hLnRzPzAxZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBjb25zdCBwcmlzbWEgPSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID8/IG5ldyBQcmlzbWFDbGllbnQoKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWE7XG5cbmV4cG9ydCBkZWZhdWx0IHByaXNtYTtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(api)/./src/lib/prompts.ts":
/*!****************************!*\
  !*** ./src/lib/prompts.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getChatAssistantSystemPrompt: () => (/* binding */ getChatAssistantSystemPrompt),\n/* harmony export */   getImageGenerationPrompt: () => (/* binding */ getImageGenerationPrompt),\n/* harmony export */   getIngredientValidationPrompt: () => (/* binding */ getIngredientValidationPrompt),\n/* harmony export */   getRecipeGenerationPrompt: () => (/* binding */ getRecipeGenerationPrompt),\n/* harmony export */   getRecipeNarrationPrompt: () => (/* binding */ getRecipeNarrationPrompt),\n/* harmony export */   getRecipeTaggingPrompt: () => (/* binding */ getRecipeTaggingPrompt)\n/* harmony export */ });\nconst getRecipeGenerationPrompt = (ingredients, dietaryPreferences)=>`\nI have the following ingredients: ${JSON.stringify(ingredients)}\n${dietaryPreferences.length ? `and dietary preferences: ${dietaryPreferences.join(\",\")}` : \"\"}.\n\nPlease provide me with three different delicious and diverse recipes. The response should be in the following JSON format without any additional text, markdown, or code formatting (e.g., no backticks):\n\n[\n  {\n    \"name\": \"Recipe Name\",\n    \"ingredients\": [\n      {\"name\": \"Ingredient 1\", \"quantity\": \"quantity and unit\"},\n      {\"name\": \"Ingredient 2\", \"quantity\": \"quantity and unit\"},\n      ...\n    ],\n    \"instructions\": [\n      \"Do this first.\",\n      \"Then do this.\",\n      ...\n    ],\n    \"dietaryPreference\": [\"Preference 1\", \"Preference 2\", ...],\n    \"additionalInformation\": {\n      \"tips\": \"Provide practical cooking tips, such as using the right cookware or ingredient substitutions.\",\n      \"variations\": \"Suggest creative variations for the recipe, like adding more vegetables or using different proteins.\",\n      \"servingSuggestions\": \"Include ideas for how to serve the dish (e.g., with toast, salad, or specific sauces).\",\n      \"nutritionalInformation\": \"Provide approximate nutritional details (e.g., calories, protein, fat, etc.).\"\n    }\n  },\n  ...\n]\n\nPlease ensure the recipes are diverse in type or cuisine (e.g., different meal categories or international flavors) and use all the ingredients listed unless dietary preferences or practicality dictate otherwise. Quantities must include appropriate units (e.g., grams, cups, teaspoons) for precision. Provide clear, detailed instructions suitable for someone with basic cooking skills. The instructions should be ordered but not include step numbers. Additionally, ensure the recipes respect the dietary preferences provided by suggesting suitable alternatives where necessary. The JSON must be valid and parsable without any additional text or formatting outside the JSON structure.\n`;\nconst getImageGenerationPrompt = (recipeName, ingredients)=>{\n    const allIngredients = ingredients.map((ingredient)=>`${ingredient.name} (${ingredient.quantity})`).join(\", \");\n    const prompt = `\nCreate a high-resolution, photorealistic image of a delicious ${recipeName} made of these ingredients: ${allIngredients}. The image should be visually appealing, showcasing the dish in an appetizing manner. It should be plated attractively on a clean white plate with natural lighting, highlighting key ingredients for visual appeal.\n`;\n    return prompt.trim();\n};\nconst getIngredientValidationPrompt = (ingredientName)=>{\n    const prompt = `Act as a Food Ingredient Validation Assistant. Given the ingredient name: ${ingredientName}, your task is to evaluate the ingredient and return a JSON object with exactly two keys:\n\n{\n  \"isValid\": true/false,\n  \"possibleVariations\": [\"variation1\", \"variation2\", \"variation3\"]\n}\n\nRules:\nThe isValid field must be true if the ingredient is commonly used in recipes, and false otherwise.\nThe possibleVariations field must contain an array of 2 to 3 valid variations, alternative names, or related ingredients for the given ingredient. If the ingredient appears to be a misspelling, include the corrected name(s) in this array. If there are no recognized variations or corrections, return an empty array for possibleVariations.\nThe output must be strictly valid JSON without any additional text, markdown formatting, or code blocks.\n\nExamples:\nInput: \"cheese\"\nExpected Output: { \"isValid\": true, \"possibleVariations\": [\"cheddar\", \"mozzarella\", \"parmesan\"] }\n\nInput: \"breakfast\"\nExpected Output: { \"isValid\": false, \"possibleVariations\": [] }\n\nInput: \"cuscus\"\nExpected Output: { \"isValid\": false, \"possibleVariations\": [\"couscous\"] }`;\n    return prompt;\n};\nconst getRecipeNarrationPrompt = (recipe)=>{\n    if (!recipe || !recipe.name || !recipe.ingredients || !recipe.instructions) {\n        return \"Invalid recipe data. Please provide a valid recipe.\";\n    }\n    const { name, ingredients, instructions, additionalInformation } = recipe;\n    return `Convert the following recipe into a **clear, well-paced, and engaging spoken narration**.\n\n- The tone should be **natural, informative, and confident**, like a professional chef explaining a recipe in a calm and collected manner.\n- Keep it **concise and instructional**, focusing on delivering the steps in an **efficient and natural way** without excessive enthusiasm.\n- Transitions should be **smooth but to the point**—avoid over-explaining or dramatizing the process.\n\n---\n\n### Recipe: **${name}**\n\n#### Ingredients:\n${ingredients.map((ing)=>`- **${ing.quantity}** of **${ing.name}**`).join(\"\\n\")}\n\n#### Instructions:\n${instructions.map((step, index)=>`${index + 1}. ${step}`).join(\"\\n\")}\n\n${additionalInformation?.tips ? `#### Tips:\\n${additionalInformation.tips}\\n` : \"\"}\n${additionalInformation?.variations ? `#### Variations:\\n${additionalInformation.variations}\\n` : \"\"}\n${additionalInformation?.servingSuggestions ? `#### Serving Suggestions:\\n${additionalInformation.servingSuggestions}\\n` : \"\"}\n${additionalInformation?.nutritionalInformation ? `#### Nutritional Info:\\n${additionalInformation.nutritionalInformation}\\n` : \"\"}\n\n---\n\n🎙 **Narration Guidelines:**\n- Deliver the narration in a **calm and professional manner**, without excessive excitement.\n- Read ingredients **clearly and efficiently**—avoid unnecessary emphasis or dramatization.\n- Guide the user **step-by-step with smooth but direct transitions**, keeping it **practical and instructional**.\n- End with a **brief, professional wrap-up**, reinforcing the dish's appeal in a **neutral and informative way**.\n- **Keep it around 60-90 seconds**—engaging but not rushed.\n\nEnsure the narration **sounds knowledgeable and practical**, maintaining a **professional and refined delivery.**`;\n};\nconst getRecipeTaggingPrompt = (recipe)=>{\n    const { name, ingredients, dietaryPreference, additionalInformation } = recipe;\n    // Extract ingredient names\n    const ingredientNames = ingredients.map((ingredient)=>ingredient.name).join(\", \");\n    // Extract additional information\n    const { tips, variations, servingSuggestions, nutritionalInformation } = additionalInformation;\n    // Construct the prompt\n    const prompt = `Please generate **10 unique, single-word tags** for the following recipe in a **pure JSON array format**.\n\n**Rules for the response:**\n1. The response **must be a valid JSON array** and **must NOT be wrapped in markdown, backticks, or any other formatting**.\n2. The array should contain **10 unique, single-word tags** that:\n   - **Accurately describe the recipe** based on its name, ingredients, dietary preferences, and additional information.\n   - **Are commonly searched terms** for similar recipes.\n   - **Include keywords** related to the recipe type, cuisine, or dietary category.\n   - **Are concise**, avoiding technical or uncommon terms.\n\n### **Example Valid Response:**\n[\"vegetarian\", \"dessert\", \"corn\", \"pudding\", \"Indian\", \"sweet\", \"almond\", \"cardamom\", \"saffron\", \"coconut\"]\n\n### **Recipe Details:**\n- **Recipe Name**: ${name}\n- **Main Ingredients**: ${ingredientNames}\n- **Dietary Preferences**: ${dietaryPreference.join(\", \")}\n- **Additional Information**:\n  - **Tips**: ${tips}\n  - **Variations**: ${variations}\n  - **Serving Suggestions**: ${servingSuggestions}\n  - **Nutritional Information**: ${nutritionalInformation}`;\n    return prompt;\n};\nconst getChatAssistantSystemPrompt = (recipe)=>{\n    const { name, ingredients, instructions, additionalInformation, dietaryPreference } = recipe;\n    const systemPrompt = `\nYou are a helpful recipe assistant. You only respond to questions that are directly related to the following recipe:\n\nName: ${name}\nIngredients: ${ingredients.map((i)=>`${i.quantity} ${i.name}`).join(\", \")}\nDietary Preferences: ${dietaryPreference.map((p)=>`${p}`).join(\", \")}\nInstructions: ${instructions}\nTips: ${additionalInformation.tips}\nVariations: ${additionalInformation.variations}\nServing Suggestions: ${additionalInformation.servingSuggestions}\nNutritional Info: ${additionalInformation.nutritionalInformation}\n\nYou may provide useful suggestions about ingredient substitutions, dietary modifications, cooking techniques, tools, or serving advice — as long as they apply specifically to this recipe.\n\nIf the user asks about anything not related to this recipe — including general cooking topics, science, history, entertainment, or other off-topic subjects — politely decline and guide them back to questions about the recipe: ${name}.\n`.trim();\n    return systemPrompt;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/prompts.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/system/status.ts":
/*!****************************************!*\
  !*** ./src/pages/api/system/status.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_lmstudio__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/lmstudio */ \"(api)/./src/lib/lmstudio.ts\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/prisma */ \"(api)/./src/lib/prisma.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_lmstudio__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_lmstudio__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            success: false,\n            status: {\n                database: \"error\",\n                lmStudio: \"error\"\n            },\n            message: \"Method not allowed\"\n        });\n    }\n    const status = {\n        database: \"disconnected\",\n        lmStudio: \"disconnected\",\n        lmStudioUrl: \"https://hahahagame-gemini-play.deno.dev\" || 0\n    };\n    // Check database connection\n    try {\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__[\"default\"].$connect();\n        // Test a simple query to ensure the connection works\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__[\"default\"].user.count();\n        status.database = \"connected\";\n    } catch (error) {\n        console.error(\"Database connection error:\", error);\n        status.database = \"error\";\n    } finally{\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__[\"default\"].$disconnect();\n    }\n    // Check LM Studio connection\n    try {\n        const isHealthy = await (0,_lib_lmstudio__WEBPACK_IMPORTED_MODULE_0__.checkLMStudioHealth)();\n        if (isHealthy) {\n            status.lmStudio = \"connected\";\n            try {\n                const models = await (0,_lib_lmstudio__WEBPACK_IMPORTED_MODULE_0__.getAvailableModels)();\n                status.models = models;\n            } catch (modelError) {\n                console.error(\"Error getting models:\", modelError);\n            }\n        } else {\n            status.lmStudio = \"disconnected\";\n        }\n    } catch (error) {\n        console.error(\"LM Studio connection error:\", error);\n        status.lmStudio = \"error\";\n    }\n    res.status(200).json({\n        success: true,\n        status\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL3N5c3RlbS9zdGF0dXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ2dGO0FBQ3ZDO0FBYTFCLGVBQWVHLFFBQzVCQyxHQUFtQixFQUNuQkMsR0FBMEM7SUFFMUMsSUFBSUQsSUFBSUUsTUFBTSxLQUFLLE9BQU87UUFDeEIsT0FBT0QsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUMxQkMsU0FBUztZQUNURixRQUFRO2dCQUFFRyxVQUFVO2dCQUFTQyxVQUFVO1lBQVE7WUFDL0NDLFNBQVM7UUFDWDtJQUNGO0lBRUEsTUFBTUwsU0FBeUM7UUFDN0NHLFVBQVU7UUFDVkMsVUFBVTtRQUNWRSxhQUFhQyx5Q0FBOEIsSUFBSTtJQUNqRDtJQUVBLDRCQUE0QjtJQUM1QixJQUFJO1FBQ0YsTUFBTVosNERBQWU7UUFDckIscURBQXFEO1FBQ3JELE1BQU1BLHdEQUFXLENBQUNpQixLQUFLO1FBQ3ZCWixPQUFPRyxRQUFRLEdBQUc7SUFDcEIsRUFBRSxPQUFPVSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyw4QkFBOEJBO1FBQzVDYixPQUFPRyxRQUFRLEdBQUc7SUFDcEIsU0FBVTtRQUNSLE1BQU1SLCtEQUFrQjtJQUMxQjtJQUVBLDZCQUE2QjtJQUM3QixJQUFJO1FBQ0YsTUFBTXFCLFlBQVksTUFBTXZCLGtFQUFtQkE7UUFDM0MsSUFBSXVCLFdBQVc7WUFDYmhCLE9BQU9JLFFBQVEsR0FBRztZQUNsQixJQUFJO2dCQUNGLE1BQU1hLFNBQVMsTUFBTXZCLGlFQUFrQkE7Z0JBQ3ZDTSxPQUFPaUIsTUFBTSxHQUFHQTtZQUNsQixFQUFFLE9BQU9DLFlBQVk7Z0JBQ25CSixRQUFRRCxLQUFLLENBQUMseUJBQXlCSztZQUN6QztRQUNGLE9BQU87WUFDTGxCLE9BQU9JLFFBQVEsR0FBRztRQUNwQjtJQUNGLEVBQUUsT0FBT1MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsK0JBQStCQTtRQUM3Q2IsT0FBT0ksUUFBUSxHQUFHO0lBQ3BCO0lBRUFOLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7UUFDbkJDLFNBQVM7UUFDVEY7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtcmVjaXBlLWdlbmVyYXRvci1sb2NhbC8uL3NyYy9wYWdlcy9hcGkvc3lzdGVtL3N0YXR1cy50cz8zMmIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnO1xuaW1wb3J0IHsgY2hlY2tMTVN0dWRpb0hlYWx0aCwgZ2V0QXZhaWxhYmxlTW9kZWxzIH0gZnJvbSAnLi4vLi4vLi4vbGliL2xtc3R1ZGlvJztcbmltcG9ydCBwcmlzbWEgZnJvbSAnLi4vLi4vLi4vbGliL3ByaXNtYSc7XG5cbmludGVyZmFjZSBTeXN0ZW1TdGF0dXNSZXNwb25zZSB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIHN0YXR1czoge1xuICAgIGRhdGFiYXNlOiAnY29ubmVjdGVkJyB8ICdkaXNjb25uZWN0ZWQnIHwgJ2Vycm9yJztcbiAgICBsbVN0dWRpbzogJ2Nvbm5lY3RlZCcgfCAnZGlzY29ubmVjdGVkJyB8ICdlcnJvcic7XG4gICAgbW9kZWxzPzogc3RyaW5nW107XG4gICAgbG1TdHVkaW9Vcmw/OiBzdHJpbmc7XG4gIH07XG4gIG1lc3NhZ2U/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoXG4gIHJlcTogTmV4dEFwaVJlcXVlc3QsXG4gIHJlczogTmV4dEFwaVJlc3BvbnNlPFN5c3RlbVN0YXR1c1Jlc3BvbnNlPlxuKSB7XG4gIGlmIChyZXEubWV0aG9kICE9PSAnR0VUJykge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIHN0YXR1czogeyBkYXRhYmFzZTogJ2Vycm9yJywgbG1TdHVkaW86ICdlcnJvcicgfSxcbiAgICAgIG1lc3NhZ2U6ICdNZXRob2Qgbm90IGFsbG93ZWQnLFxuICAgIH0pO1xuICB9XG5cbiAgY29uc3Qgc3RhdHVzOiBTeXN0ZW1TdGF0dXNSZXNwb25zZVsnc3RhdHVzJ10gPSB7XG4gICAgZGF0YWJhc2U6ICdkaXNjb25uZWN0ZWQnLFxuICAgIGxtU3R1ZGlvOiAnZGlzY29ubmVjdGVkJyxcbiAgICBsbVN0dWRpb1VybDogcHJvY2Vzcy5lbnYuTE1fU1RVRElPX0JBU0VfVVJMIHx8ICdodHRwOi8vMTkyLjE2OC41LjM1OjEyMzQvdjEnLFxuICB9O1xuXG4gIC8vIENoZWNrIGRhdGFiYXNlIGNvbm5lY3Rpb25cbiAgdHJ5IHtcbiAgICBhd2FpdCBwcmlzbWEuJGNvbm5lY3QoKTtcbiAgICAvLyBUZXN0IGEgc2ltcGxlIHF1ZXJ5IHRvIGVuc3VyZSB0aGUgY29ubmVjdGlvbiB3b3Jrc1xuICAgIGF3YWl0IHByaXNtYS51c2VyLmNvdW50KCk7XG4gICAgc3RhdHVzLmRhdGFiYXNlID0gJ2Nvbm5lY3RlZCc7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgY29ubmVjdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgc3RhdHVzLmRhdGFiYXNlID0gJ2Vycm9yJztcbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCBwcmlzbWEuJGRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIC8vIENoZWNrIExNIFN0dWRpbyBjb25uZWN0aW9uXG4gIHRyeSB7XG4gICAgY29uc3QgaXNIZWFsdGh5ID0gYXdhaXQgY2hlY2tMTVN0dWRpb0hlYWx0aCgpO1xuICAgIGlmIChpc0hlYWx0aHkpIHtcbiAgICAgIHN0YXR1cy5sbVN0dWRpbyA9ICdjb25uZWN0ZWQnO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbW9kZWxzID0gYXdhaXQgZ2V0QXZhaWxhYmxlTW9kZWxzKCk7XG4gICAgICAgIHN0YXR1cy5tb2RlbHMgPSBtb2RlbHM7XG4gICAgICB9IGNhdGNoIChtb2RlbEVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgbW9kZWxzOicsIG1vZGVsRXJyb3IpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0dXMubG1TdHVkaW8gPSAnZGlzY29ubmVjdGVkJztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignTE0gU3R1ZGlvIGNvbm5lY3Rpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgIHN0YXR1cy5sbVN0dWRpbyA9ICdlcnJvcic7XG4gIH1cblxuICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgc3VjY2VzczogdHJ1ZSxcbiAgICBzdGF0dXMsXG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbImNoZWNrTE1TdHVkaW9IZWFsdGgiLCJnZXRBdmFpbGFibGVNb2RlbHMiLCJwcmlzbWEiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic3RhdHVzIiwianNvbiIsInN1Y2Nlc3MiLCJkYXRhYmFzZSIsImxtU3R1ZGlvIiwibWVzc2FnZSIsImxtU3R1ZGlvVXJsIiwicHJvY2VzcyIsImVudiIsIkxNX1NUVURJT19CQVNFX1VSTCIsIiRjb25uZWN0IiwidXNlciIsImNvdW50IiwiZXJyb3IiLCJjb25zb2xlIiwiJGRpc2Nvbm5lY3QiLCJpc0hlYWx0aHkiLCJtb2RlbHMiLCJtb2RlbEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/system/status.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsystem%2Fstatus&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csystem%5Cstatus.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();