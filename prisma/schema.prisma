// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  image     String?
  emailVerified DateTime?
  isActive  Boolean  @default(true)
  role      String   @default("user")
  
  // Preferences as JSON
  preferences Json @default("{}")
  
  // Stats as JSON  
  stats     Json @default("{}")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  recipes   Recipe[]
  forumPosts ForumPost[]
  forumComments ForumComment[]
  notifications Notification[]
  aiGenerated AIGenerated[]
  recipeCollections RecipeCollection[]
  recipeReviews RecipeReview[]
  collectionRecipes CollectionRecipe[]
  shoppingLists ShoppingList[]
  shoppingListItems ShoppingListItem[]
  
  @@map("users")
}

model Recipe {
  id          String   @id @default(cuid())
  name        String
  ingredients Json     // Array of {name, quantity}
  instructions String[]
  dietaryPreference String[]
  additionalInformation Json @default("{}")
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  likes       String[] // Array of user IDs
  likesCount  Int      @default(0)
  image       String?
  audio       String?
  tags        Json     @default("[]") // Array of {tag}
  
  openaiPromptId String?
  isShared    Boolean  @default(false)
  sharedAt    DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  reviews RecipeReview[]
  collectionRecipes CollectionRecipe[]
  shoppingListItems ShoppingListItem[]
  
  @@map("recipes")
}

model ForumPost {
  id            String   @id @default(cuid())
  title         String
  content       String
  category      String   // tips, ingredients, questions, reviews
  
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName      String
  
  tags          String[]
  likes         String[] // Array of user IDs
  likesCount    Int      @default(0)
  commentsCount Int      @default(0)
  
  isSticky      Boolean  @default(false)
  isLocked      Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  comments      ForumComment[]
  
  @@map("forumposts")
}

model ForumComment {
  id              String   @id @default(cuid())
  content         String
  
  postId          String
  post            ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName        String
  
  parentCommentId String?
  parentComment   ForumComment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         ForumComment[] @relation("CommentReplies")
  
  likes           String[] // Array of user IDs
  likesCount      Int      @default(0)
  isDeleted       Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("forumcomments")
}

model Notification {
  id              String   @id @default(cuid())
  
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type            String   // like, comment, follow, recipe_generated, system
  message         String
  relatedRecipeId String?
  relatedUserId   String?
  read            Boolean  @default(false)
  priority        String   @default("medium") // low, medium, high
  metadata        Json?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("notifications")
}

model AIGenerated {
  id           String   @id @default(cuid())
  
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  prompt       String
  response     Json
  model        String   @default("gemini-2.0-flash")
  tokens       Int      @default(0)
  cost         Float    @default(0)
  status       String   @default("success") // success, error, pending
  errorMessage String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("aigenerateds")
}

// Recipe Collection System
model RecipeCollection {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  collectionRecipes CollectionRecipe[]
  
  @@map("recipecollections")
}

// Junction table for Recipe Collections
model CollectionRecipe {
  id           String   @id @default(cuid())
  
  collectionId String
  collection   RecipeCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  
  recipeId     String
  recipe       Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  addedAt      DateTime @default(now())
  notes        String?  // Personal notes about this recipe in the collection
  
  @@unique([collectionId, recipeId])
  @@map("collectionrecipes")
}

// Recipe Review System
model RecipeReview {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName  String   // Denormalized for performance
  
  isPublic  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([recipeId, userId]) // One review per user per recipe
  @@map("recipereviews")
}

// Shopping List System
model ShoppingList {
  id          String   @id @default(cuid())
  name        String
  description String?
  isCompleted Boolean  @default(false)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  items       ShoppingListItem[]
  
  @@map("shoppinglists")
}

// Shopping List Items
model ShoppingListItem {
  id            String   @id @default(cuid())
  name          String
  quantity      String
  unit          String?
  category      String?  // 食材分類：蔬菜、肉類、調料等
  isCompleted   Boolean  @default(false)
  estimatedPrice Float?
  notes         String?
  
  shoppingListId String
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 來源食譜（如果是從食譜生成的）
  sourceRecipeId String?
  sourceRecipe   Recipe? @relation(fields: [sourceRecipeId], references: [id], onDelete: SetNull)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("shoppinglistitems")
}
